/*
	Copyright © 2006 — 2008, 2011, 2013, 2015 Svyatoslav Skriplyonok. All rights reserved.
	Licensed under the GNU AFFERO GENERAL PUBLIC LICENSE, Version 3
	License: https://github.com/simvesel/extractswf/blob/master/LICENSE
*/


//=============================================================
#define __clearpost
#pragma option CPA

#pragma option w32c
#pragma option P
#pragma option J1
#pragma option X

#include <windows.h>
#include "msvcrt.h"

//Сделать так, чтобы на создаваемых файлах не устанавливался флаг "r"
//Добавить массив (сигнатура, смещение)
//массив номер версии в двоичном формате (старший, младший номера)

//Добавить функцию по занесению в спецпапку(рандомом имя генерируется) ошибочных файлов (обработать повторные имена: как-то изменить)

//Дельфины.exe SIG_V4_7	37582406h
//SEEK_V4_7	46000h

//Рыбка в аквариуме.exe SIG_V3_8	353D0FDDh
//SEEK_V3_8	24000h

//	!!!!!!!!!!!!!


#define	SIG_V3_8	353D0FDDh
#define	SEEK_V3_8	24000h

#define	SIG_V4_7	37582406h
#define	SEEK_V4_7	46000h

#define	SIGN_V4		6010Bh
#define	SEEK_V4		46000h

#define	SIGN_V5_30D	399C98BDh
#define	SEEK_V5_30D8	58000h
#define	SEEK_V5_30DC	5C000h

#define	SIGN_V5_30C	399C998Ch
#define	SEEK_V5_30C9	59000h
#define	SEEK_V5_30CF	5F000h
#define	SEEK_V5_30C6	69000h

#define	SIGN_V6_4	3C74E454h
#define	SEEK_V6_4	0C6000h

#define	SIGN_V6_21	3C85AAA3h
#define	SEEK_V6_21B7	0B7000h
#define	SEEK_V6_21BC	0BC000h
#define	SEEK_V6_21C8	0C8000h

#define	SIGN_V7_14	3F57AD38h
#define	SEEK_V7_14	0F1000h

#define	SIGN_V7_19	3FD4F616h
#define	SEEK_V7_19	0F5000h

#define	SIGN_V8_22	4310D1EEh
#define	SEEK_V8_22	182000h

//кол-во МБайт читаем
#define	MAXBYTEREAD	96 *1048576


//#define DBG
#undef DBG

#ifdef DBG
  #define DEBUG 1
#else
  #define DEBUG 0
#endif


enum { ErrName= 1, ErrParam, ErrInfo, ErrOpen, ErrRead, ErrSeek, ErrSig, ErrCreate, ErrRename };

dword fHANDL, nHANDL, sHANDL, SetSeek, pSeek, CNT_Byte, ErrLev, k;
char *pPrm;

struct sett_extract {
  char pause;
  char batch;
};

sett_extract sett;

#define EX_PATH MAX_PATH*16

byte OEM_Name[EX_PATH],  OEM_newName[EX_PATH];
WIN32_FILE_ATTRIBUTE_DATA FlInf;
WIN32_FIND_DATA Find;
byte Buff[MAXBYTEREAD];

int main()
{
//  Buff[MAXBYTEREAD/2] = 0DEADDEADh;
//  Buff[MAXBYTEREAD/4] = 0DEADDEADh;
//  Buff[MAXBYTEREAD-16] = 0DEADDEADh;

  puts( "Copyright © 2006 — 2008, 2011, 2013, 2015 SimVesel(Simron)\n"
    "EXE --> SWF Extractor 1v4.8" );

  sett.pause = 1; //1 - при выходе ждёт нажатия любой клавиши
  sett.batch = 1; //1 - сама прога ищет в текущем каталоге все файлы *.exe и обрабатывает их
  ErrLev= 0;

  FOR( k = 0; k++< __numparam; )
  {
    pPrm = @PARAMSTR(k);
    IF( !strcmp(pPrm, "-q") )
    {
      sett.pause = 0;
      CONTINUE;
    }
    IF( !strcmp(pPrm, "-m") )
    {
      sett.batch = 0;
      CONTINUE;
    }

    printf( "Unknown cmd \"%s\"\n", pPrm );
    ErrLev = ErrParam;
  }
  IF(DEBUG) printf("\npause: %d\nbatch: %d\n", sett.pause, sett.batch);

  IF(ErrLev) GOTO localExit;

  EDI = -1;
  IF(sett.batch)
  {
    IF( sHANDL= FindFirstFile("*.exe", #Find)== EDI )
    {
      puts("No files found\n");
    localExit:
      goto ExitMain;
    }
  }

  FOR(;;)
  {
    puts("");

#ifdef DBG
    if(!sett.batch) {
#else
    IF(!sett.batch) {
#endif
    NewRecord:
      IF(!gets(#OEM_Name))  break;
      DSBYTE[#OEM_Name- 1+ EX_PATH]= 0;
      IF(DEBUG) printf("gets:\t\"%s\"\n", #OEM_Name);
      OemToChar(#OEM_Name, #Find.cFileName);
      IF(!GetFileAttributesEx(#Find.cFileName, GetFileExInfoStandard, #FlInf)) {
        printf("Erorr info \"%s\"\n", #OEM_Name);
        ErrLev= ErrInfo;
        GOTO NewRecord;
      }
      Find.nFileSizeLow= FlInf.nFileSizeLow;
      IF(DEBUG) printf("After GetFileAttr..:\t\"%s\"\n", #OEM_Name);
    }
    IF(Find.nFileSizeLow< 244000)  goto NextFile;
    IF(sett.batch) CharToOem(#Find.cFileName, #OEM_Name);

    if( fHANDL= _lopen(#Find.cFileName, OF_READ) != EDI)
    {
      IF ( CNT_Byte = _lread(fHANDL, #Buff, MAXBYTEREAD) < 244000 )
      {
        ErrLev = ErrRead;
        printf("Error read \"%s\"\n", #OEM_Name);
        goto CloseEXEfile;
      }
      IF(DEBUG) printf("Read from \"%s\":\t\t%dB\n", #OEM_Name, CNT_Byte);
      SetSeek= 0;
      EBX= #Buff+8+ DSDWORD[#Buff+ 3Ch];
      switch(DSDWORD[EBX])
      {
        CASE SIG_V3_8:  SetSeek = SEEK_V3_8; break;
        CASE SIG_V4_7:  SetSeek = SEEK_V4_7; break;
        CASE SIGN_V4:    SetSeek= SEEK_V4; break;
        CASE SIGN_V5_30D:
            EAX= DSDWORD[#Buff+ SEEK_V5_30D8];
            EAX&= 0FFFFFFh;
            IF( (EAX== 'SWC')||(EAX== 'SWF') )  SetSeek= SEEK_V5_30D8;
            ELSE SetSeek= SEEK_V5_30DC;
            break;
        case SIGN_V5_30C:
            EAX= DSDWORD[#Buff+ SEEK_V5_30C9];
            EAX&= 0FFFFFFh;
            IF( (EAX== 'SWC')||(EAX== 'SWF') )  SetSeek= SEEK_V5_30C9;
            ELSE
            {
              EAX= DSDWORD[#Buff+ SEEK_V5_30CF];
              EAX&= 0FFFFFFh;
              IF( (EAX== 'SWC')||(EAX== 'SWF') ) SetSeek= SEEK_V5_30CF;
              ELSE SetSeek= SEEK_V5_30C6;
            }
            break;
        case SIGN_V6_4:    SetSeek= SEEK_V6_4; BREAK;
        case SIGN_V6_21:
            EAX= DSDWORD[#Buff+ SEEK_V6_21B7];
            EAX&= 0FFFFFFh;
            IF( (EAX== 'SWC')||(EAX== 'SWF') )  SetSeek= SEEK_V6_21B7;
            ELSE
            {
              EAX= DSDWORD[#Buff+ SEEK_V6_21BC];
              EAX&= 0FFFFFFh;
              IF( (EAX== 'SWC')||(EAX== 'SWF') ) SetSeek= SEEK_V6_21BC;
              ELSE SetSeek= SEEK_V6_21C8;
            }
            BREAK;
        case SIGN_V7_14:    SetSeek= SEEK_V7_14; BREAK;
        case SIGN_V7_19:    SetSeek= SEEK_V7_19; BREAK;
        case SIGN_V8_22:    SetSeek= SEEK_V8_22; BREAK;
      }

      k = strlen(#Find.cFileName) - 4; //смещение от первого символа полного имени файла до точки в расширении
      if(SetSeek)
      {
        pSeek = #Buff+ SetSeek;
        EAX = DSDWORD[pSeek];
        EAX &= 0FFFFFFh;
        if( (EAX == 'SWC')||(EAX == 'SWF') )
        {
          EBX= #Find.cFileName + k;
          DSDWORD[EBX]= 'fws.';
          CharToOem(#Find.cFileName, #OEM_newName);
          printf("Create..\t\"%s\"\n", #OEM_newName);
          ErrLev = 0; //сбрасываем историю ошибок
          IF( nHANDL= _lcreat(#Find.cFileName, 1)!= EDI)
          {
            CNT_Byte= Find.nFileSizeLow- SetSeek;
            SetSeek= _lwrite(nHANDL, pSeek, CNT_Byte);
            IF(SetSeek!= CNT_Byte) { ErrLev= ErrSeek; printf("Error write in \"%s\"\n", #OEM_newName); }
            ELSE printf("Write in\t\"%s\"\t\t%dB\n", #OEM_newName, SetSeek);
            _lclose(nHANDL);
          }
          ELSE { ErrLev= ErrCreate; printf("Error create \"%s\"\n", #OEM_newName); }
          DSDWORD[pSeek]= 0;
        }
        ELSE ErrLev = ErrSig;
      }
      ELSE ErrLev = ErrSig;

    CloseEXEfile:
      _lclose(fHANDL);

// Если не была найдена сигнатура, то изменяем "exe" в "err"
      if ( ErrLev == ErrSig )
      {
        printf("Error SWF-SIGN: \t\"%s\"\n", #OEM_Name);
        strncpy(#Buff, #Find.cFileName, EX_PATH); //копируем имя из Find.cFileName в Buff
        EBX= #Buff + 1 + k; //на первый символ расширения
        DSDWORD[EBX]= '\0rre';  //расширение ".err"

        IF ( (MoveFileEx(#Find.cFileName, #Buff, MOVEFILE_COPY_ALLOWED) != 0) && (CharToOem(#Buff, #Buff) != 0) )
        {
          CharToOem(#Find.cFileName, #Find.cFileName);
          printf("Rename \"%s\" to \"%s\"\n", #Find.cFileName, #Buff);
        }
        ELSE {
          ErrLev= ErrRename;
          printf("Error rename to \"%s\"\n", #Buff);
        }
      }
    }
    ELSE { ErrLev= ErrOpen; printf("Error open \"%s\"\n", #OEM_Name); }

  NextFile:
    IF( (sett.batch) && ( !FindNextFile(sHANDL, #Find) ) )
      BREAK;
  }
  IF(sett.batch)
    FindClose(sHANDL);

  puts( "\nFinish" );

ExitMain:
  IF( sett.pause )  _getch();
  return ErrLev;
}
